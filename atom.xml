<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Houseowo]]></title>
  <subtitle><![CDATA[Lwxiang's Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://houseowo.me/"/>
  <updated>2016-02-21T14:57:36.000Z</updated>
  <id>http://houseowo.me/</id>
  
  <author>
    <name><![CDATA[Lwxiang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[POJ]]></title>
    <link href="http://houseowo.me/2016/02/21/POJ/"/>
    <id>http://houseowo.me/2016/02/21/POJ/</id>
    <published>2016-02-21T14:56:29.000Z</published>
    <updated>2016-02-21T14:57:36.000Z</updated>
    <content type="html"><![CDATA[<p>﻿title: usaco2006nov Roadblocks</p>
<p>date: 2012-12-14 16:30:01</p>
<hr>
<p>题目：Roadblocks</p>
<p>题目来源：<a href="http://poj.org/problem?id=3255" title="Roadblocks" target="_blank" rel="external">POJ3255</a></p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><p>题目大意为：</p>
<p>给一个双向路径联通图，求节点1到节点N的第二短路(路程严格大于最短路)</p>
<h2 id="u89E3_u6CD5"><a href="#u89E3_u6CD5" class="headerlink" title="解法"></a>解法</h2><p>刚开始想到的是直接做最短路，用一个dist存最短路，用一个dist2存第二短路，即每次更新dist[i]时，把dist[i]的原有值给dist2[i]</p>
<p>但是发现这样很蛋疼。。</p>
<a id="more"></a>
<p>因为路程严格大于最短路，所以我们只要知道数值上大于最短路的就可以了，不必担心求出来的路径和最短路一样</p>
<p>（如最短路次短路都是10，求的时候就要保证他们不是来自同一路径）</p>
<p>这样的话我们可以两头做最短路</p>
<p>然后枚举边</p>
<p>找出除最短程以外的最短路程</p>
<h2 id="u4F18_u5316"><a href="#u4F18_u5316" class="headerlink" title="优化"></a>优化</h2><p>spfa + 边表</p>
<h2 id="u8BE6_u89E3"><a href="#u8BE6_u89E3" class="headerlink" title="详解"></a>详解</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ans = min (dist<span class="string">[1,i]</span> + edg<span class="string">[i,j]</span> + dist<span class="string">[j,n]</span>)  (ans&gt;dist<span class="string">[1,n]</span>)</span><br></pre></td></tr></table></figure>
<h2 id="u7EC6_u8282"><a href="#u7EC6_u8282" class="headerlink" title="细节"></a>细节</h2><p>存双向边，数组上线翻倍</p>
<p>spfa，数组上线再翻10-20倍</p>
<p>或者用循环队列</p>
<h2 id="u6E90_u7A0B_u5E8F"><a href="#u6E90_u7A0B_u5E8F" class="headerlink" title="源程序"></a>源程序</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Program Lwx;</span><br><span class="line"><span class="keyword">Var</span> 	n, m:longint;</span><br><span class="line">    	edg:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">200100</span>, <span class="number">1</span>..<span class="number">4</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	last, first:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">5005</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	i, j, k, l, a, b, c, ans, top, fv:longint;</span><br><span class="line">    	f:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">500100</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	dist:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">2</span>,<span class="number">1</span>..<span class="number">5005</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	past:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">5005</span>] <span class="keyword">of</span> boolean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">	<span class="comment">//assign(input, 'test.in');reset(input);</span></span><br><span class="line">  	readln(n, m);</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  	<span class="keyword">begin</span></span><br><span class="line">		readln(a, b, c);</span><br><span class="line">    		edg[i*<span class="number">2</span>-<span class="number">1</span>, <span class="number">1</span>] := a; edg[i*<span class="number">2</span>-<span class="number">1</span>, <span class="number">2</span>] := c; edg[i*<span class="number">2</span>-<span class="number">1</span>, <span class="number">4</span>] := b;</span><br><span class="line">    		<span class="keyword">if</span> first[b] = <span class="number">0</span> <span class="keyword">then</span> first[b] := i*<span class="number">2</span> - <span class="number">1</span> <span class="keyword">else</span> edg[last[b], <span class="number">3</span>] := i*<span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    		last[b] := i*<span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">		edg[i*<span class="number">2</span>, <span class="number">1</span>] := b; edg[i*<span class="number">2</span>, <span class="number">2</span>] := c; edg[i*<span class="number">2</span>, <span class="number">4</span>] := a;</span><br><span class="line">    		<span class="keyword">if</span> first[a] = <span class="number">0</span> <span class="keyword">then</span> first[a] := i*<span class="number">2</span> <span class="keyword">else</span> edg[last[a], <span class="number">3</span>] := i*<span class="number">2</span>;</span><br><span class="line">    		last[a] := i*<span class="number">2</span>;</span><br><span class="line">  	<span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">for</span> a := <span class="number">1</span> <span class="keyword">to</span> <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">  	<span class="keyword">begin</span></span><br><span class="line">    		fillchar(dist[a], sizeof(dist[a]), $ff);</span><br><span class="line">    		fillchar(past, sizeof(past), <span class="keyword">true</span>);</span><br><span class="line">    		<span class="keyword">if</span> a = <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    		<span class="keyword">begin</span></span><br><span class="line">      			f[<span class="number">1</span>] := <span class="number">1</span>;</span><br><span class="line">      			dist[a, <span class="number">1</span>] := <span class="number">0</span>;</span><br><span class="line">      			past[<span class="number">1</span>] := <span class="keyword">false</span>;</span><br><span class="line">    		<span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">    		<span class="keyword">begin</span></span><br><span class="line">      			f[<span class="number">1</span>] := n;</span><br><span class="line">      			dist[a, n] := <span class="number">0</span>;</span><br><span class="line">      			past[n] := <span class="keyword">false</span>;</span><br><span class="line">    		<span class="keyword">end</span>;</span><br><span class="line">    		i := <span class="number">0</span>; j := <span class="number">1</span>;</span><br><span class="line">    		<span class="keyword">while</span> i &lt; j <span class="keyword">do</span></span><br><span class="line">    		<span class="keyword">begin</span></span><br><span class="line">      			k := f[i+<span class="number">1</span>];</span><br><span class="line">      			l := first[k];</span><br><span class="line">      			<span class="keyword">while</span> l &lt;&gt; <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">      			<span class="keyword">begin</span></span><br><span class="line">        			<span class="keyword">if</span> (dist[a, edg[l, <span class="number">1</span>]] = -<span class="number">1</span>)<span class="keyword">or</span>(dist[a, k]+edg[l,<span class="number">2</span>] &lt; dist[a, edg[l, <span class="number">1</span>]]) <span class="keyword">then</span></span><br><span class="line">        			<span class="keyword">begin</span></span><br><span class="line">          				dist[a, edg[l, <span class="number">1</span>]] := dist[a, k] + edg[l, <span class="number">2</span>];</span><br><span class="line">          				<span class="keyword">if</span> past[edg[l, <span class="number">1</span>]] <span class="keyword">then</span></span><br><span class="line">          				<span class="keyword">begin</span></span><br><span class="line">            					inc(j);</span><br><span class="line">            					f[j] := edg[l, <span class="number">1</span>];</span><br><span class="line">            					past[edg[l, <span class="number">1</span>]] := <span class="keyword">false</span>;</span><br><span class="line">          				<span class="keyword">end</span>;</span><br><span class="line">        			<span class="keyword">end</span>;</span><br><span class="line">        			l := edg[l, <span class="number">3</span>];</span><br><span class="line">      			<span class="keyword">end</span>;</span><br><span class="line">      			past[k] := <span class="keyword">true</span>;</span><br><span class="line">      			inc(i);</span><br><span class="line">    		<span class="keyword">end</span>;</span><br><span class="line">  	<span class="keyword">end</span>;</span><br><span class="line">  	top := dist[<span class="number">1</span>, n];</span><br><span class="line">  	ans := maxlongint;</span><br><span class="line">  	<span class="keyword">for</span> i := <span class="number">1</span> <span class="keyword">to</span> <span class="number">2</span>*m <span class="keyword">do</span></span><br><span class="line"> 	<span class="keyword">begin</span></span><br><span class="line">    		fv := edg[i, <span class="number">2</span>] + dist[<span class="number">1</span>, edg[i, <span class="number">4</span>]] + dist[<span class="number">2</span>, edg[i, <span class="number">1</span>]];</span><br><span class="line">    		<span class="keyword">if</span> (fv &lt;&gt; top)<span class="keyword">and</span>(fv &lt; ans) <span class="keyword">then</span> ans := fv;</span><br><span class="line">  	<span class="keyword">end</span>;</span><br><span class="line">  	<span class="keyword">write</span>(ans);</span><br><span class="line">  	<span class="comment">//close(input);</span></span><br><span class="line"><span class="keyword">End</span>.</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>﻿title: usaco2006nov Roadblocks</p>
<p>date: 2012-12-14 16:30:01</p>
<hr>
<p>题目：Roadblocks</p>
<p>题目来源：<a href="http://poj.org/problem?id=3255" title="Roadblocks">POJ3255</a></p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><p>题目大意为：</p>
<p>给一个双向路径联通图，求节点1到节点N的第二短路(路程严格大于最短路)</p>
<h2 id="u89E3_u6CD5"><a href="#u89E3_u6CD5" class="headerlink" title="解法"></a>解法</h2><p>刚开始想到的是直接做最短路，用一个dist存最短路，用一个dist2存第二短路，即每次更新dist[i]时，把dist[i]的原有值给dist2[i]</p>
<p>但是发现这样很蛋疼。。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[usaco2006nov Roadblocks]]></title>
    <link href="http://houseowo.me/2012/12/14/POJ3255/"/>
    <id>http://houseowo.me/2012/12/14/POJ3255/</id>
    <published>2012-12-14T08:30:01.000Z</published>
    <updated>2016-02-21T14:55:08.000Z</updated>
    <content type="html"><![CDATA[<p>题目：Roadblocks</p>
<p>题目来源：<a href="http://poj.org/problem?id=3255" title="Roadblocks" target="_blank" rel="external">POJ3255</a></p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><p>题目大意为：</p>
<p>给一个双向路径联通图，求节点1到节点N的第二短路(路程严格大于最短路)</p>
<h2 id="u89E3_u6CD5"><a href="#u89E3_u6CD5" class="headerlink" title="解法"></a>解法</h2><p>刚开始想到的是直接做最短路，用一个dist存最短路，用一个dist2存第二短路，即每次更新dist[i]时，把dist[i]的原有值给dist2[i]</p>
<p>但是发现这样很蛋疼。。</p>
<a id="more"></a>
<p>因为路程严格大于最短路，所以我们只要知道数值上大于最短路的就可以了，不必担心求出来的路径和最短路一样</p>
<p>（如最短路次短路都是10，求的时候就要保证他们不是来自同一路径）</p>
<p>这样的话我们可以两头做最短路</p>
<p>然后枚举边</p>
<p>找出除最短程以外的最短路程</p>
<h2 id="u4F18_u5316"><a href="#u4F18_u5316" class="headerlink" title="优化"></a>优化</h2><p>spfa + 边表</p>
<h2 id="u8BE6_u89E3"><a href="#u8BE6_u89E3" class="headerlink" title="详解"></a>详解</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ans = min (dist<span class="string">[1,i]</span> + edg<span class="string">[i,j]</span> + dist<span class="string">[j,n]</span>)  (ans&gt;dist<span class="string">[1,n]</span>)</span><br></pre></td></tr></table></figure>
<h2 id="u7EC6_u8282"><a href="#u7EC6_u8282" class="headerlink" title="细节"></a>细节</h2><p>存双向边，数组上线翻倍</p>
<p>spfa，数组上线再翻10-20倍</p>
<p>或者用循环队列</p>
<h2 id="u6E90_u7A0B_u5E8F"><a href="#u6E90_u7A0B_u5E8F" class="headerlink" title="源程序"></a>源程序</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Program Lwx;</span><br><span class="line"><span class="keyword">Var</span> 	n, m:longint;</span><br><span class="line">    	edg:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">200100</span>, <span class="number">1</span>..<span class="number">4</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	last, first:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">5005</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	i, j, k, l, a, b, c, ans, top, fv:longint;</span><br><span class="line">    	f:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">500100</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	dist:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">2</span>,<span class="number">1</span>..<span class="number">5005</span>] <span class="keyword">of</span> longint;</span><br><span class="line">    	past:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">5005</span>] <span class="keyword">of</span> boolean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">	<span class="comment">//assign(input, 'test.in');reset(input);</span></span><br><span class="line">  	readln(n, m);</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  	<span class="keyword">begin</span></span><br><span class="line">		readln(a, b, c);</span><br><span class="line">    		edg[i*<span class="number">2</span>-<span class="number">1</span>, <span class="number">1</span>] := a; edg[i*<span class="number">2</span>-<span class="number">1</span>, <span class="number">2</span>] := c; edg[i*<span class="number">2</span>-<span class="number">1</span>, <span class="number">4</span>] := b;</span><br><span class="line">    		<span class="keyword">if</span> first[b] = <span class="number">0</span> <span class="keyword">then</span> first[b] := i*<span class="number">2</span> - <span class="number">1</span> <span class="keyword">else</span> edg[last[b], <span class="number">3</span>] := i*<span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    		last[b] := i*<span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">		edg[i*<span class="number">2</span>, <span class="number">1</span>] := b; edg[i*<span class="number">2</span>, <span class="number">2</span>] := c; edg[i*<span class="number">2</span>, <span class="number">4</span>] := a;</span><br><span class="line">    		<span class="keyword">if</span> first[a] = <span class="number">0</span> <span class="keyword">then</span> first[a] := i*<span class="number">2</span> <span class="keyword">else</span> edg[last[a], <span class="number">3</span>] := i*<span class="number">2</span>;</span><br><span class="line">    		last[a] := i*<span class="number">2</span>;</span><br><span class="line">  	<span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">for</span> a := <span class="number">1</span> <span class="keyword">to</span> <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">  	<span class="keyword">begin</span></span><br><span class="line">    		fillchar(dist[a], sizeof(dist[a]), $ff);</span><br><span class="line">    		fillchar(past, sizeof(past), <span class="keyword">true</span>);</span><br><span class="line">    		<span class="keyword">if</span> a = <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    		<span class="keyword">begin</span></span><br><span class="line">      			f[<span class="number">1</span>] := <span class="number">1</span>;</span><br><span class="line">      			dist[a, <span class="number">1</span>] := <span class="number">0</span>;</span><br><span class="line">      			past[<span class="number">1</span>] := <span class="keyword">false</span>;</span><br><span class="line">    		<span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">    		<span class="keyword">begin</span></span><br><span class="line">      			f[<span class="number">1</span>] := n;</span><br><span class="line">      			dist[a, n] := <span class="number">0</span>;</span><br><span class="line">      			past[n] := <span class="keyword">false</span>;</span><br><span class="line">    		<span class="keyword">end</span>;</span><br><span class="line">    		i := <span class="number">0</span>; j := <span class="number">1</span>;</span><br><span class="line">    		<span class="keyword">while</span> i &lt; j <span class="keyword">do</span></span><br><span class="line">    		<span class="keyword">begin</span></span><br><span class="line">      			k := f[i+<span class="number">1</span>];</span><br><span class="line">      			l := first[k];</span><br><span class="line">      			<span class="keyword">while</span> l &lt;&gt; <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">      			<span class="keyword">begin</span></span><br><span class="line">        			<span class="keyword">if</span> (dist[a, edg[l, <span class="number">1</span>]] = -<span class="number">1</span>)<span class="keyword">or</span>(dist[a, k]+edg[l,<span class="number">2</span>] &lt; dist[a, edg[l, <span class="number">1</span>]]) <span class="keyword">then</span></span><br><span class="line">        			<span class="keyword">begin</span></span><br><span class="line">          				dist[a, edg[l, <span class="number">1</span>]] := dist[a, k] + edg[l, <span class="number">2</span>];</span><br><span class="line">          				<span class="keyword">if</span> past[edg[l, <span class="number">1</span>]] <span class="keyword">then</span></span><br><span class="line">          				<span class="keyword">begin</span></span><br><span class="line">            					inc(j);</span><br><span class="line">            					f[j] := edg[l, <span class="number">1</span>];</span><br><span class="line">            					past[edg[l, <span class="number">1</span>]] := <span class="keyword">false</span>;</span><br><span class="line">          				<span class="keyword">end</span>;</span><br><span class="line">        			<span class="keyword">end</span>;</span><br><span class="line">        			l := edg[l, <span class="number">3</span>];</span><br><span class="line">      			<span class="keyword">end</span>;</span><br><span class="line">      			past[k] := <span class="keyword">true</span>;</span><br><span class="line">      			inc(i);</span><br><span class="line">    		<span class="keyword">end</span>;</span><br><span class="line">  	<span class="keyword">end</span>;</span><br><span class="line">  	top := dist[<span class="number">1</span>, n];</span><br><span class="line">  	ans := maxlongint;</span><br><span class="line">  	<span class="keyword">for</span> i := <span class="number">1</span> <span class="keyword">to</span> <span class="number">2</span>*m <span class="keyword">do</span></span><br><span class="line"> 	<span class="keyword">begin</span></span><br><span class="line">    		fv := edg[i, <span class="number">2</span>] + dist[<span class="number">1</span>, edg[i, <span class="number">4</span>]] + dist[<span class="number">2</span>, edg[i, <span class="number">1</span>]];</span><br><span class="line">    		<span class="keyword">if</span> (fv &lt;&gt; top)<span class="keyword">and</span>(fv &lt; ans) <span class="keyword">then</span> ans := fv;</span><br><span class="line">  	<span class="keyword">end</span>;</span><br><span class="line">  	<span class="keyword">write</span>(ans);</span><br><span class="line">  	<span class="comment">//close(input);</span></span><br><span class="line"><span class="keyword">End</span>.</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>题目：Roadblocks</p>
<p>题目来源：<a href="http://poj.org/problem?id=3255" title="Roadblocks">POJ3255</a></p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><p>题目大意为：</p>
<p>给一个双向路径联通图，求节点1到节点N的第二短路(路程严格大于最短路)</p>
<h2 id="u89E3_u6CD5"><a href="#u89E3_u6CD5" class="headerlink" title="解法"></a>解法</h2><p>刚开始想到的是直接做最短路，用一个dist存最短路，用一个dist2存第二短路，即每次更新dist[i]时，把dist[i]的原有值给dist2[i]</p>
<p>但是发现这样很蛋疼。。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[usaco2006nov Corn Fields]]></title>
    <link href="http://houseowo.me/2012/12/14/POJ3254/"/>
    <id>http://houseowo.me/2012/12/14/POJ3254/</id>
    <published>2012-12-14T08:00:50.000Z</published>
    <updated>2016-02-21T14:51:35.000Z</updated>
    <content type="html"><![CDATA[<p>题目：Corn Fields</p>
<p>题目来源：<a href="http://poj.org/problem?id=3254" title="Corn Fields" target="_blank" rel="external">POJ3254</a></p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><p>题目大意为：</p>
<ol>
<li><p>给定一个12*12的矩形，每个格子为0或1，0为不能放东西，1可以</p>
</li>
<li><p>现在放东西进格子里，一个格子可以放的条件：</p>
<ul>
<li>这个格子可以放（值为1）</li>
<li>相邻的四个格子没有放</li>
</ul>
</li>
<li><p>求有几种放法</p>
</li>
</ol>
<a id="more"></a>
<p>注意到没有后效性，可以用动归做</p>
<p>以每行为阶段，以每行的放的情况为状态，压缩为二进制（N&lt;=12）</p>
<p>状态转移的约束为1），2）条件</p>
<h2 id="u89E3_u6CD5"><a href="#u89E3_u6CD5" class="headerlink" title="解法"></a>解法</h2><p>F[I,J]表示第I行，状态为J</p>
<p>这样转移方程为<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F<span class="string">[I, J]</span> = SIGMA&#123; F<span class="string">[I-1, K]</span> &#125;  (j and k=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>当然每行的状态确定前要先检查是否符合条件1</p>
<h2 id="u4F18_u5316"><a href="#u4F18_u5316" class="headerlink" title="优化"></a>优化</h2><p>如果每行都去考虑与地图的契合性，会非常浪费时间</p>
<p>因为J包含了所有可能，K也是，这样比较J,K就会包含许多无用的状态，J不符的和K不符的</p>
<p>这样转移复杂度会达到O(2^2N)将近7000W</p>
<p>所以要进行优化，将每行的符合地图的状态预处理出来</p>
<h2 id="u8BE6_u89E3"><a href="#u8BE6_u89E3" class="headerlink" title="详解"></a>详解</h2><p>边界为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="u7EC6_u8282"><a href="#u7EC6_u8282" class="headerlink" title="细节"></a>细节</h2><p>注意要模100000000</p>
<h2 id="u6E90_u7A0B_u5E8F"><a href="#u6E90_u7A0B_u5E8F" class="headerlink" title="源程序"></a>源程序</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Program</span> Lwx;</span><br><span class="line"><span class="keyword">Const</span> md=<span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">Var</span> 	n, m:longint;</span><br><span class="line">       	i, j, k, l, a, b, c:longint;</span><br><span class="line">       	f, g:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">15</span>, <span class="number">0</span>..<span class="number">5000</span>] <span class="keyword">of</span> longint;</span><br><span class="line">       	p:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">15</span>] <span class="keyword">of</span> longint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Procedure</span> <span class="title">given</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">Var</span> i:longint;</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">	<span class="keyword">for</span> i :=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> p[i] <span class="keyword">and</span> x = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		inc(f[i, <span class="number">0</span>]);</span><br><span class="line">		f[i, f[i, <span class="number">0</span>]]:=x;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">End</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Procedure</span> <span class="title">find</span><span class="params">(x, y:longint)</span>;</span></span><br><span class="line"><span class="keyword">Var</span> a, b, c:longint;</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">	<span class="keyword">if</span> x = m <span class="keyword">then</span> </span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		given(y);</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">if</span> y <span class="keyword">and</span> <span class="number">1</span>= <span class="number">0</span> <span class="keyword">then</span> find(x+<span class="number">1</span>,y <span class="keyword">shl</span> <span class="number">1</span>+<span class="number">1</span>);</span><br><span class="line">	find(x+<span class="number">1</span>, y <span class="keyword">shl</span> <span class="number">1</span>);</span><br><span class="line"><span class="keyword">End</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">	<span class="comment">//assign(input, 'test.in');reset(input);</span></span><br><span class="line">	readln(n, m);</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		k := <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> j :=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">read</span>(a);</span><br><span class="line">			k := k <span class="keyword">shl</span> <span class="number">1</span> + (a+<span class="number">1</span>) <span class="keyword">mod</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		p[i] := k;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	fillchar(f, sizeof(f), <span class="number">0</span>);</span><br><span class="line">	find(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	f[<span class="number">0</span>, <span class="number">0</span>] := <span class="number">1</span>;</span><br><span class="line">	f[<span class="number">0</span>, <span class="number">1</span>] := <span class="number">0</span>;</span><br><span class="line">	g[<span class="number">0</span>, <span class="number">1</span>] := <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">1</span> <span class="keyword">to</span> f[i, <span class="number">0</span>] <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		g[i, j] := <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> k :=<span class="number">1</span> <span class="keyword">to</span> f[i-<span class="number">1</span>, <span class="number">0</span>] <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> f[i, j] <span class="keyword">and</span> f[i-<span class="number">1</span>, k]=<span class="number">0</span> <span class="keyword">then</span> g[i, j] := (g[i, j]+g[i-<span class="number">1</span>, k]) <span class="keyword">mod</span> md;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	L := <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span> <span class="keyword">to</span> f[n, <span class="number">0</span>] <span class="keyword">do</span> L := (L+g[n, i]) <span class="keyword">mod</span> md;</span><br><span class="line">	<span class="keyword">write</span>(L);</span><br><span class="line">	<span class="comment">//close(input);</span></span><br><span class="line"><span class="keyword">End</span>.</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>题目：Corn Fields</p>
<p>题目来源：<a href="http://poj.org/problem?id=3254" title="Corn Fields">POJ3254</a></p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><p>题目大意为：</p>
<ol>
<li><p>给定一个12*12的矩形，每个格子为0或1，0为不能放东西，1可以</p>
</li>
<li><p>现在放东西进格子里，一个格子可以放的条件：</p>
<ul>
<li>这个格子可以放（值为1）</li>
<li>相邻的四个格子没有放</li>
</ul>
</li>
<li><p>求有几种放法</p>
</li>
</ol>]]>
    
    </summary>
    
  </entry>
  
</feed>
